---
swagger: "2.0"
info:
  description: "<img src=\"logo.png\" style=\"display: block; margin-left: auto; margin-right:\
    \ auto; width: 70%;\">\n\n# Intro\n\nThis website documents the API methods available\
    \ for the `wallet-api` program.\n\nThe default API url is [127.0.0.1:8070](http://127.0.0.1:8070).\n\
    \nNote that this program is distinct from `turtle-service`, which uses a different\
    \ API.\nThe api docs for `turtle-service` can be found [here](https://api-docs.turtlecoin.lol/).\n\
    \nWhen using the docs, be aware that you can click the 'Model' tab to get a description\
    \ of all available parameters, their types, and an example value.\n\n# Initialization\n\
    \n* Start by launching the `wallet-api` program.\n* From a terminal (or via a\
    \ programming language):\n\n```\n./wallet-api --rpc-password somepassword\n```\n\
    \n* Or if you're on windows:\n\n```\nwallet-api.exe --rpc-password somepassword\n\
    ```\n\n* An RPC password is always required, and you should then provide this\
    \ password with every request to the API, in the `X-API-KEY` header.\n\n* If you\
    \ want to see the available configuration options for the `wallet-api`, launch\
    \ the program with:\n```\n./wallet-api --help\n```\n\n* Note that you cannot generate/open\
    \ a wallet via the command line, only via the API.\n  This is by design to prevent\
    \ application developers having to parse command line output.\n\n# Try it Out\n\
    \nIf you want to test wallet-api out without doing any programming, you can use\
    \ the 'Try it out' section in swagger.\n* Start by launching your wallet with\
    \ CORS enabled:\n\n```\n./wallet-api --rpc-password \"mypassword\" --enable-cors\
    \ \"*\"\n```\n\n* Click the 'Authorize' button in Swagger, and type in the RPC\
    \ password you just chose - in this case, \"mypassword\", and click 'Authorize'.\n\
    * Click a method to expand it, then click the 'Try it Out' button.\n* You can\
    \ modify the parameters you want to send here, and then hit 'Execute' to send\
    \ the request.\n* Note that this may not work in Firefox, I had to use Chrome\
    \ to get it to work. F12 (developer console) may help diagnose CORS issues.\n\n\
    # API Wrappers\n\nFinally, whilst you may send raw HTTP requests to the API url,\
    \ you may be interested in an API/RPC wrapper.\n\nThese can be generated for many\
    \ languages, by using the `Generate Client` option in the top menu.\nBe patient,\
    \ this can take some time to complete.\n\n# Support\n\nIf you are having issues,\
    \ please stop by our [discord](http://chat.turtlecoin.lol) and visit the `#dev_learning`\
    \ channel for assistance."
  version: "1.0.0"
  title: "wallet-api"
host: "127.0.0.1:8070"
tags:
- name: "wallet"
  description: "Opening and creating wallets"
- name: "addresses"
  description: "Creating addresses, importing addresses"
- name: "node"
  description: "Get node details, swap node"
- name: "keys"
  description: "Get private keys or mnemonic seed"
- name: "transactions"
  description: "Get a list of transactions, send a transaction"
- name: "balance"
  description: "Get a wallets or an addresses balance"
- name: "misc"
  description: "Miscellaneous operations, such as saving, getting status, etc"
schemes:
- "http"
security:
- api_key: []
paths:
  /wallet/open:
    post:
      tags:
      - "wallet"
      summary: "Opens an already existing wallet"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Wallet"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "The operation completed successfully."
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "A wallet is already open. Call DELETE on /wallet first, to\
            \ close it."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /wallet/import/key:
    post:
      tags:
      - "wallet"
      summary: "Imports a wallet with a private spend and view key"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/WalletKeyImport"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "The operation completed successfully."
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "A wallet is already open. Call DELETE on /wallet first, to\
            \ close it."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /wallet/import/seed:
    post:
      tags:
      - "wallet"
      summary: "Imports a wallet using a mnemonic seed"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/WalletSeedImport"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "The operation completed successfully."
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "A wallet is already open. Call DELETE on /wallet first, to\
            \ close it."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /wallet/import/view:
    post:
      tags:
      - "wallet"
      summary: "Imports a view only wallet with a private view key and public address"
      description: "Note that view only wallets can only see incoming transactions,\
        \ so balance may be inflated, and they cannot send transactions."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/WalletViewImport"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "The operation completed successfully."
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "A wallet is already open. Call DELETE on /wallet first, to\
            \ close it."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /wallet/create:
    post:
      tags:
      - "wallet"
      summary: "Creates a new wallet"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Wallet"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "The operation completed successfully."
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "A wallet is already open. Call DELETE on /wallet first, to\
            \ close it."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /wallet:
    delete:
      tags:
      - "wallet"
      summary: "Closes and saves the opened wallet"
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /save:
    put:
      tags:
      - "misc"
      summary: "Saves the wallet state"
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /export/json:
    post:
      tags:
      - "misc"
      summary: "Exports the wallet data to JSON into the filepath given"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/body"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "The operation completed successfully."
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /reset:
    put:
      tags:
      - "misc"
      summary: "Resets and saves the wallet, beginning scanning from height given,\
        \ if any"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/body_1"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "The operation completed successfully."
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /node:
    get:
      tags:
      - "node"
      summary: "Gets the node address, port, fee, and fee address"
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
    put:
      tags:
      - "node"
      summary: "Sets the node address and port"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Node"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "The operation completed successfully."
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /addresses/validate:
    post:
      tags:
      - "misc"
      summary: "Validate an address. If the address is valid, a 200 response code\
        \ will be returned, else a 400 response code will be returned."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_2"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
  /keys:
    get:
      tags:
      - "keys"
      summary: "Gets the wallet containers shared private view key"
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_2"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /keys/{address}:
    get:
      tags:
      - "keys"
      summary: "Gets the public and private spend key for the given address"
      description: "Note that this method cannot be used with a view only wallet"
      parameters:
      - name: "address"
        in: "path"
        description: "The address to use for this operation. Should be a valid, 99\
          \ character TRTL address."
        required: true
        type: "string"
        x-exportParamName: "Address"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_3"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /keys/mnemonic/{address}:
    get:
      tags:
      - "keys"
      summary: "Gets the mnemonic seed for the given address, if possible"
      description: "Note that this method cannot be used with a view only wallet"
      parameters:
      - name: "address"
        in: "path"
        description: "The address to use for this operation. Should be a valid, 99\
          \ character TRTL address."
        required: true
        type: "string"
        x-exportParamName: "Address"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_4"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /status:
    get:
      tags:
      - "misc"
      summary: "Get the wallet sync status, peer count, and hashrate"
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_5"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /addresses:
    get:
      tags:
      - "addresses"
      summary: "Gets a list of all addresses in the wallet container"
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_6"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /addresses/{address}:
    delete:
      tags:
      - "addresses"
      summary: "Deletes the given subwallet from the container"
      description: "Note that you cannot delete the 'primary' address, the first address\
        \ created in the wallet."
      parameters:
      - name: "address"
        in: "path"
        description: "The address to use for this operation. Should be a valid, 99\
          \ character TRTL address."
        required: true
        type: "string"
        x-exportParamName: "Address"
      responses:
        "200":
          description: "The operation completed successfully."
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /addresses/primary:
    get:
      tags:
      - "addresses"
      summary: "Gets the 'primary' address"
      description: "The primary address is the first wallet created, and the one used\
        \ as the change address if not specified."
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_7"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /addresses/create:
    post:
      tags:
      - "addresses"
      summary: "Creates a new, random address in the wallet container"
      parameters: []
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /addresses/import:
    post:
      tags:
      - "addresses"
      summary: "Imports a subwallet with the given private spend key"
      description: "It is HIGHLY recommended you provide a scan height with this operation\
        \ - wallet syncing will have to begin again from the scan height given (defaults\
        \ to zero) if the scan height is less than the height of the current wallet\
        \ sync status."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_3"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201_1"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /addresses/import/view:
    post:
      tags:
      - "addresses"
      summary: "Imports a view only subwallet with the given publicSpendKey"
      description: "It is HIGHLY recommended you provide a scan height with this operation\
        \ - wallet syncing will have to begin again from the scan height given (defaults\
        \ to zero) if the scan height is less than the height of the current wallet\
        \ sync status."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_4"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201_1"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /addresses/{address}/{paymentID}:
    get:
      tags:
      - "addresses"
      summary: "Creates an integrated address from an address and payment ID"
      parameters:
      - name: "address"
        in: "path"
        description: "The address to use for this operation. Should be a valid, 99\
          \ character TRTL address."
        required: true
        type: "string"
        x-exportParamName: "Address"
      - name: "paymentID"
        in: "path"
        description: "The payment ID to use for this operation. Should be a 64 char\
          \ hex string."
        required: true
        type: "string"
        x-exportParamName: "PaymentID"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_8"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions:
    get:
      tags:
      - "transactions"
      summary: "Gets a list of all transactions in the wallet container"
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/hash/{hash}:
    get:
      tags:
      - "transactions"
      summary: "Gets details on the given transaction, if found"
      description: "Note that the transaction must be contained in this wallet, and\
        \ must not be unconfirmed. E.g, you must get this hash back when calling /transactions"
      parameters:
      - name: "hash"
        in: "path"
        description: "The transaction hash to use for this operation. Should be a\
          \ 64 char hex string."
        required: true
        type: "string"
        x-exportParamName: "Hash"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_10"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "404":
          description: "The transaction hash was not found."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/unconfirmed:
    get:
      tags:
      - "transactions"
      summary: "Gets a list of all unconfirmed, outgoing transactions in the wallet\
        \ container"
      description: "Note that this DOES NOT include incoming transactions in the pool.\
        \ This only applies to transactions that have been sent by this wallet file,\
        \ and have not been added to a block yet."
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/unconfirmed/{address}:
    get:
      tags:
      - "transactions"
      summary: "Gets a list of unconfirmed, outgoing transactions, for the given address"
      description: "Note that this DOES NOT include incoming transactions in the pool.\
        \ This only applies to transactions that have been sent by this wallet file,\
        \ and have not been added to a block yet."
      parameters:
      - name: "address"
        in: "path"
        description: "The address to use for this operation. Should be a valid, 99\
          \ character TRTL address."
        required: true
        type: "string"
        x-exportParamName: "Address"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/{startHeight}:
    get:
      tags:
      - "transactions"
      summary: "Returns transactions for the wallet starting at start height for 1,000\
        \ blocks"
      parameters:
      - name: "startHeight"
        in: "path"
        description: "The starting block height to use for this operation."
        required: true
        type: "number"
        x-exportParamName: "StartHeight"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/{startHeight}/{endHeight}:
    get:
      tags:
      - "transactions"
      summary: "Returns transactions for the wallet starting at start height until\
        \ end height"
      description: "Note that start height must be < end height"
      parameters:
      - name: "startHeight"
        in: "path"
        description: "The starting block height to use for this operation."
        required: true
        type: "number"
        x-exportParamName: "StartHeight"
      - name: "endHeight"
        in: "path"
        description: "The ending block height to use for this operation."
        required: true
        type: "number"
        x-exportParamName: "EndHeight"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/address/{address}/{startHeight}:
    get:
      tags:
      - "transactions"
      summary: "Returns transactions for the wallet starting at start height for 1,000\
        \ blocks, that belong to the given address"
      description: "Note that the transfers array will still contain transfers to\
        \ other addresses, if present"
      parameters:
      - name: "address"
        in: "path"
        description: "The address to use for this operation. Should be a valid, 99\
          \ character TRTL address."
        required: true
        type: "string"
        x-exportParamName: "Address"
      - name: "startHeight"
        in: "path"
        description: "The starting block height to use for this operation."
        required: true
        type: "number"
        x-exportParamName: "StartHeight"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/address/{address}/{startHeight}/{endHeight}:
    get:
      tags:
      - "transactions"
      summary: "Returns transactions for the wallet starting at start height until\
        \ end height, that belong to the given address"
      description: "Note that start height must be < end height. Also note that the\
        \ transfers array will still contain transfers to other addresses, if present."
      parameters:
      - name: "address"
        in: "path"
        description: "The address to use for this operation. Should be a valid, 99\
          \ character TRTL address."
        required: true
        type: "string"
        x-exportParamName: "Address"
      - name: "startHeight"
        in: "path"
        description: "The starting block height to use for this operation."
        required: true
        type: "number"
        x-exportParamName: "StartHeight"
      - name: "endHeight"
        in: "path"
        description: "The ending block height to use for this operation."
        required: true
        type: "number"
        x-exportParamName: "EndHeight"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_9"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/send/basic:
    post:
      tags:
      - "transactions"
      summary: "Sends a transaction"
      description: "This method will take funds from all subwallets as needed, and\
        \ will use the primary address as the change address. It also uses a default\
        \ fee, and default mixin. If this is not acceptable, please use the /advanced\
        \ call instead."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_5"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201_2"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/prepare/basic:
    post:
      tags:
      - "transactions"
      summary: "Creates a transaction but does not relay it to the network"
      description: "This method will take funds from all subwallets as needed, and\
        \ will use the primary address as the change address. It also uses a default\
        \ fee, and default mixin. If this is not acceptable, please use the /advanced\
        \ call instead. Allows you to review the created transactions fee before deciding\
        \ whether to commit to paying that fee. Prepared transactions can be sent\
        \ using `/transactions/send/prepared`, or cancelled with `/transactions/prepared`.\
        \ Note that every parameters sans destinations is optional."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_6"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201_3"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/send/advanced:
    post:
      tags:
      - "transactions"
      summary: "Sends a transaction"
      description: "Note that every parameters sans destinations is optional."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SendTransactionAdvanced"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201_2"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/prepare/advanced:
    post:
      tags:
      - "transactions"
      summary: "Creates a transaction but does not relay it to the network"
      description: "Allows you to review the created transactions fee before deciding\
        \ whether to commit to paying that fee. Prepared transactions can be sent\
        \ using `/transactions/send/prepared`, or cancelled with `/transactions/prepared`.\
        \ Note that every parameters sans destinations is optional."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SendTransactionAdvanced"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201_3"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/send/prepared:
    post:
      tags:
      - "transactions"
      summary: "Sends a previously prepared transaction"
      description: "Submits a transaction that was previously prepared with `/transactions/prepare/basic`\
        \ or `/transactions/prepare/advanced` to the network."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_7"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201_4"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/prepared/{hash}:
    delete:
      tags:
      - "transactions"
      summary: "Cancels a previously prepared transaction"
      description: "While it is not mandatory to call this method for a prepared transaction\
        \ you do not wish to send, it is highly advised, as it will free up RAM."
      parameters:
      - name: "hash"
        in: "path"
        description: "The prepared transaction hash to cancel. This hash is returned\
          \ from the `/transactions/prepared/basic` or `/transactions/prepared/advanced`\
          \ methods."
        required: true
        type: "string"
        x-exportParamName: "Hash"
      responses:
        "200":
          description: "The operation completed successfully."
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "404":
          description: "The prepared transaction hash given was not found. Note that\
            \ prepared transactions are lost upon restarting the wallet process."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/send/fusion/basic:
    post:
      tags:
      - "transactions"
      summary: "Sends a fusion transaction"
      description: "Fusion transactions are zero fee, and seek to combine small inputs\
        \ into larger ones, to allow for larger transactions. Many fusions may be\
        \ required to fully optimize a wallet."
      parameters: []
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201_5"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/send/fusion/advanced:
    post:
      tags:
      - "transactions"
      summary: "Sends a fusion transaction"
      description: "Fusion transactions are zero fee, and seek to combine small inputs\
        \ into larger ones, to allow for larger transactions. Many fusions may be\
        \ required to fully optimize a wallet. Every parameter is optional."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_8"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_201_5"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /transactions/privatekey/{hash}:
    get:
      tags:
      - "transactions"
      summary: "Gets the transaction private key of the given transaction. This can\
        \ be used to audit a transaction."
      description: "The transaction must have been sent by this wallet container.\
        \ If the wallet container has been reimported, it will not be present."
      parameters:
      - name: "hash"
        in: "path"
        description: "The transaction hash to use for this operation. Should be a\
          \ 64 char hex string."
        required: true
        type: "string"
        x-exportParamName: "Hash"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_11"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /balance:
    get:
      tags:
      - "balance"
      summary: "Get the balance for the entire wallet container"
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_12"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /balance/{address}:
    get:
      tags:
      - "balance"
      summary: "Get the balance for a specific address"
      parameters:
      - name: "address"
        in: "path"
        description: "The address to use for this operation. Should be a valid, 99\
          \ character TRTL address."
        required: true
        type: "string"
        x-exportParamName: "Address"
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            $ref: "#/definitions/inline_response_200_12"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
  /balances:
    get:
      tags:
      - "balance"
      summary: "Get the balance for every address"
      parameters: []
      responses:
        "200":
          description: "The operation completed successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200_13"
        "400":
          description: "A parse error occured, or an error occured processing your\
            \ request."
          schema:
            $ref: "#/definitions/inline_response_400"
        "401":
          description: "API key is missing or invalid."
        "403":
          description: "This operation requires a wallet to be open, and one has not\
            \ been opened."
        "500":
          description: "An exception was thrown whilst processing the request. See\
            \ the console for logs."
securityDefinitions:
  api_key:
    description: "Your rpc password that you supplied on starting the wallet API."
    type: "apiKey"
    name: "X-API-KEY"
    in: "header"
definitions:
  Wallet:
    allOf:
    - $ref: "#/definitions/Node"
    - properties:
        filename:
          type: "string"
          example: "mywallet.wallet"
          description: "The filename to store/load the wallet from. Note that this\
            \ is relative to where turtle-wallet-api was launched from - it is recommended\
            \ you use an absolute path."
        password:
          type: "string"
          example: "supersecretpassword"
          description: "The password used to open the wallet"
  WalletImport:
    allOf:
    - $ref: "#/definitions/Wallet"
    - properties:
        scanHeight:
          type: "integer"
          format: "uint64"
          example: 300000
          description: "The block height to start scanning from"
  WalletKeyImport:
    allOf:
    - $ref: "#/definitions/WalletImport"
    - properties:
        privateViewKey:
          type: "string"
          example: "493f522e1f46b5c07f753ed28dc2db9da5f571f28c2fa54f4c9a0a7941b09d0b"
          description: "64 char hex private view key"
        privateSpendKey:
          type: "string"
          example: "5c703d9bde0b7cd5ff3e19ea826a44066534661a7322c85e854e73f06e49cd06"
          description: "64 char hex private spend key"
  WalletSeedImport:
    allOf:
    - $ref: "#/definitions/WalletImport"
    - properties:
        mnemonicSeed:
          type: "string"
          example: "cynical waveform sixteen husband zebra ritual vexed jaws eccentric\
            \ jewels toenail having nabbing wept nozzle grunt tipsy flying pegs feel\
            \ upright lower racetrack sapling sapling"
          description: "The 25 words mnemonic seed"
  WalletViewImport:
    allOf:
    - $ref: "#/definitions/WalletImport"
    - properties:
        privateViewKey:
          type: "string"
          example: "493f522e1f46b5c07f753ed28dc2db9da5f571f28c2fa54f4c9a0a7941b09d0b"
          description: "64 char hex private view key"
        address:
          type: "string"
          example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
          description: "99 char public TRTL address"
  Node:
    type: "object"
    properties:
      daemonHost:
        type: "string"
        example: "127.0.0.1"
        description: "The daemon host to sync the wallet with"
        default: "127.0.0.1"
      daemonPort:
        type: "integer"
        format: "uint16"
        example: 11898
        description: "The daemon port to sync the wallet with"
    example:
      daemonHost: "127.0.0.1"
      daemonPort: 11898
  SendTransactionAdvanced:
    type: "object"
    required:
    - "destinations"
    properties:
      destinations:
        type: "array"
        items:
          $ref: "#/definitions/SendTransactionAdvanced_destinations"
      mixin:
        type: "number"
        example: 3
        description: "The mixin level to use"
      fee:
        type: "number"
        format: "uint64"
        example: 2430
        description: "The fee to use with this transaction (in atomic units)"
      feePerByte:
        type: "number"
        format: "double"
        example: 2
        description: "The amount in atomic units to pay for each byte of the resulting\
          \ transaction size"
        default: 1.953125
      sourceAddresses:
        type: "array"
        items:
          type: "string"
          example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
          description: "The addresses to draw funds for the transaction from (must\
            \ be an address in this container). Defaults to every address."
          default: "Every address in the container."
      paymentID:
        type: "string"
        example: "38a8224a4c8bc5f060555cf9e89551dcd0cbb1c587a52b63e98f71280c362ee4"
        description: "The payment ID to use"
        default: "No payment ID"
      changeAddress:
        type: "string"
        example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
        description: "The address in this wallet to return any 'change' to if we have\
          \ to spend more than the requested amount. Defaults to primary address."
        default: "Wallet container primary address"
      unlockTime:
        type: "number"
        format: "uint64"
        example: 1200000
        description: "When to unlock the transaction. A user cannot spend locked funds\
          \ until the unlock time has been reached. Defaults to zero if not given.\
          \ Can use either a block height, or a unix timestamp."
      extra:
        type: "string"
        example: "48656c6c6f20576f726c64"
        description: "Hex representation of any extra data to be included in the `tx_extra`\
          \ field of the transaction."
        default: ""
    example:
      destinations:
      - address: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
        amount: 1234
      - address: "TRTLv3r4N3Jbk7FApJXN3M66xWWr8FhbAiwGdEJC2wF1hTKGxnwUzhH8pFydrruvdtPSVTCMUKWGdSrAitgnEVFp8356HCkKHZG"
        amount: 5000
      paymentID: "38a8224a4c8bc5f060555cf9e89551dcd0cbb1c587a52b63e98f71280c362ee4"
      unlockTime: 2200000
  Transaction:
    type: "object"
    properties:
      blockHeight:
        type: "number"
        format: "uint64"
        example: 800000
        description: "The block this transaction is contained in."
      fee:
        type: "number"
        format: "uint64"
        example: 10
        description: "The amount the sender paid in miner fees for this transaction.\
          \ In atomic units."
      hash:
        type: "string"
        example: "8e2dc89659409ea9c34a2e28f7350cefba304159c04cc4926acd12035a8b2379"
        description: "The hash of this transaction"
      isCoinbaseTransaction:
        type: "boolean"
        example: false
        description: "Whether this transaction is a miner reward or a normal transaction."
      paymentID:
        type: "string"
        example: "7fe73bd90ef05dea0b5c15fc78696619c50dd5f2ba628f2fd16a2e3445b1922f"
        description: "An identifier supplied by the sender. May be \"\" (empty string)"
      timestamp:
        type: "number"
        format: "uint64"
        example: 1543222082
        description: "The unix timestamp of the block this transaction is contained\
          \ in."
      unlockTime:
        type: "number"
        format: "uint64"
        example: 0
        description: "When this transaction unlocks for spending. If >= 50000000,\
          \ treated as a timestamp. Normally zero."
      transfers:
        $ref: "#/definitions/Transaction_transfers"
    example:
      blockHeight: 800000
      isCoinbaseTransaction: false
      paymentID: "7fe73bd90ef05dea0b5c15fc78696619c50dd5f2ba628f2fd16a2e3445b1922f"
      transfers:
        amount: 1234
        address: "TRTLv3ErzkY2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3Dy2rH"
      fee: 10
      unlockTime: 0
      hash: "8e2dc89659409ea9c34a2e28f7350cefba304159c04cc4926acd12035a8b2379"
      timestamp: 1543222082
  inline_response_400:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        example: 5
        description: "A numeric code representing the error, for programmatic use.\
          \ Error code mappings can be found here - https://github.com/turtlecoin/turtlecoin/blob/development/src/WalletBackend/WalletErrors.h\
          \ We will endeavour to not change these mappings."
      errorMessage:
        type: "string"
        example: "The password given for this wallet is incorrect."
        description: "A human readable error message, for displaying to the user.\
          \ It is suggested for programmers to not pattern match on these, and instead\
          \ use the errorCode."
  body:
    type: "object"
    properties:
      filename:
        type: "string"
        example: "wallet-data.json"
        description: "The filepath to save the wallet JSON to. Note that this is relative\
          \ to where wallet-api was launched from - it is recommended you use an absolute\
          \ path."
  body_1:
    type: "object"
    properties:
      scanHeight:
        type: "integer"
        format: "int64"
        example: 300000
        description: "The block height to start scanning from"
        default: 0
  inline_response_200:
    type: "object"
    properties:
      Node:
        $ref: "#/definitions/Node"
    example:
      Node:
        daemonHost: "127.0.0.1"
        daemonPort: 11898
  body_2:
    type: "object"
    properties:
      address:
        type: "string"
        example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
        description: "The address to validate"
  inline_response_200_1:
    type: "object"
    properties:
      isIntegrated:
        type: "boolean"
        example: true
        description: "Whether the address is an integrated address"
      paymentID:
        type: "string"
        example: ""
        description: "If the address is integrated, this will hold the integrated\
          \ payment ID"
      actualAddress:
        type: "string"
        example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4w"
        description: "If the address is integrated, this will hold the extracted actual\
          \ address. Otherwise, it will be the passed in address."
      publicSpendKey:
        type: "string"
        example: "88032068e8209480bc634a48a00795c6a24c248a50f0937c168ac96ad0ba240d"
        description: "The public spend key of the passed in address"
      publicViewKey:
        type: "string"
        example: "8d635efe0077ec70006732a847a36adbc5b108a3e7cebdbb93e0cfc35fcd8d45"
        description: "The public view key of the passed in address"
    example:
      actualAddress: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4w"
      publicSpendKey: "88032068e8209480bc634a48a00795c6a24c248a50f0937c168ac96ad0ba240d"
      paymentID: ""
      isIntegrated: true
      publicViewKey: "8d635efe0077ec70006732a847a36adbc5b108a3e7cebdbb93e0cfc35fcd8d45"
  inline_response_200_2:
    type: "object"
    properties:
      privateViewKey:
        type: "string"
        example: "85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a"
        description: "The private view key"
    example:
      privateViewKey: "85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a"
  inline_response_200_3:
    type: "object"
    properties:
      privateSpendKey:
        type: "string"
        example: "85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a"
        description: "The private spend key"
      publicSpendKey:
        type: "string"
        example: "85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a"
        description: "The public spend key"
    example:
      publicSpendKey: "85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a"
      privateSpendKey: "85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a"
  inline_response_200_4:
    type: "object"
    properties:
      mnemonicSeed:
        type: "string"
        example: "leech lifestyle newt tarnished vials weavers decay nerves buying\
          \ taken sample after jailed cupcake token pavements welders gifts ferry\
          \ keep humid abbey emails entrance leech"
        description: "The mnemonic seed"
    example:
      mnemonicSeed: "leech lifestyle newt tarnished vials weavers decay nerves buying\
        \ taken sample after jailed cupcake token pavements welders gifts ferry keep\
        \ humid abbey emails entrance leech"
  inline_response_200_5:
    type: "object"
    properties:
      walletBlockCount:
        type: "integer"
        format: "uint64"
        example: 100000
        description: "The amount of blocks the wallet has scanned"
      localDaemonBlockCount:
        type: "integer"
        format: "uint64"
        example: 800000
        description: "The amount of blocks the daemon the wallet is connected to has\
          \ synced"
      networkBlockCount:
        type: "integer"
        format: "uint64"
        example: 900000
        description: "The amount of blocks the network has"
      peerCount:
        type: "integer"
        format: "uint32"
        example: 20
        description: "The amount of peers (incoming + outgoing) peers the daemon has"
      hashrate:
        type: "integer"
        format: "uint64"
        example: 123456789
        description: "The hashrate the last local block the daemon knows about has"
      isViewWallet:
        type: "boolean"
        example: false
        description: "Whether this wallet is a view only wallet. Certain operations\
          \ are illegal on a view only wallet, such as transferring."
      subWalletCount:
        type: "integer"
        example: 1
        description: "The amount of subwallets in the container"
    example:
      localDaemonBlockCount: 800000
      peerCount: 20
      networkBlockCount: 900000
      isViewWallet: false
      hashrate: 123456789
      subWalletCount: 1
      walletBlockCount: 100000
  inline_response_200_6:
    type: "object"
    properties:
      addresses:
        type: "array"
        example:
        - "TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
        items:
          type: "string"
    example:
      addresses:
      - "TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
  inline_response_200_7:
    type: "object"
    properties:
      address:
        type: "string"
        example: "TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
        description: "The primary address"
    example:
      address: "TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
  inline_response_201:
    type: "object"
    properties:
      address:
        type: "string"
        example: "TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
        description: "The created address"
      privateSpendKey:
        type: "string"
        example: "6d4a7c160cbd4c9de33eeb161ff30539d2e28b447eb5af73523cc3379c591c83"
        description: "The corresponding private spend key for this address, can be\
          \ used to restore along with the shared private view key"
      publicSpendKey:
        type: "string"
        example: "6d4a7c160cbd4c9de33eeb161ff30539d2e28b447eb5af73523cc3379c591c83"
        description: "The corresponding public spend key for this address, can be\
          \ used to restore a view wallet along with the shared private view key"
    example:
      address: "TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
      publicSpendKey: "6d4a7c160cbd4c9de33eeb161ff30539d2e28b447eb5af73523cc3379c591c83"
      privateSpendKey: "6d4a7c160cbd4c9de33eeb161ff30539d2e28b447eb5af73523cc3379c591c83"
  body_3:
    required:
    - "privateSpendKey"
    properties:
      scanHeight:
        type: "integer"
        format: "uint64"
        example: 300000
        description: "The block height to start scanning from"
      privateSpendKey:
        type: "string"
        example: "5c703d9bde0b7cd5ff3e19ea826a44066534661a7322c85e854e73f06e49cd06"
        description: "64 char hex private spend key"
  inline_response_201_1:
    type: "object"
    properties:
      address:
        type: "string"
        example: "TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
        description: "The created address"
    example:
      address: "TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
  body_4:
    required:
    - "publicSpendKey"
    properties:
      scanHeight:
        type: "integer"
        format: "uint64"
        example: 300000
        description: "The block height to start scanning from"
      publicSpendKey:
        type: "string"
        example: "5c703d9bde0b7cd5ff3e19ea826a44066534661a7322c85e854e73f06e49cd06"
        description: "64 char hex public spend key"
  inline_response_200_8:
    type: "object"
    properties:
      integratedAddress:
        type: "string"
        example: "TRTLuxiNXhy96RNDkv2jx29jL7GdTWYBmA4r7K8KRpDWA4hJJnTZEgFHFzxqvmBLtz94oF4uPokQdHbV9j2g7S6LA4hKPvjZEFS2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3BoCpXD"
        description: "The integrated address"
    example:
      integratedAddress: "TRTLuxiNXhy96RNDkv2jx29jL7GdTWYBmA4r7K8KRpDWA4hJJnTZEgFHFzxqvmBLtz94oF4uPokQdHbV9j2g7S6LA4hKPvjZEFS2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3BoCpXD"
  inline_response_200_9:
    type: "object"
    properties:
      transactions:
        type: "array"
        items:
          $ref: "#/definitions/Transaction"
    example:
      transactions:
      - blockHeight: 800000
        isCoinbaseTransaction: false
        paymentID: "7fe73bd90ef05dea0b5c15fc78696619c50dd5f2ba628f2fd16a2e3445b1922f"
        transfers:
          amount: 1234
          address: "TRTLv3ErzkY2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3Dy2rH"
        fee: 10
        unlockTime: 0
        hash: "8e2dc89659409ea9c34a2e28f7350cefba304159c04cc4926acd12035a8b2379"
        timestamp: 1543222082
      - blockHeight: 800000
        isCoinbaseTransaction: false
        paymentID: "7fe73bd90ef05dea0b5c15fc78696619c50dd5f2ba628f2fd16a2e3445b1922f"
        transfers:
          amount: 1234
          address: "TRTLv3ErzkY2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3Dy2rH"
        fee: 10
        unlockTime: 0
        hash: "8e2dc89659409ea9c34a2e28f7350cefba304159c04cc4926acd12035a8b2379"
        timestamp: 1543222082
  inline_response_200_10:
    type: "object"
    properties:
      transactions:
        $ref: "#/definitions/Transaction"
    example:
      transactions:
        blockHeight: 800000
        isCoinbaseTransaction: false
        paymentID: "7fe73bd90ef05dea0b5c15fc78696619c50dd5f2ba628f2fd16a2e3445b1922f"
        transfers:
          amount: 1234
          address: "TRTLv3ErzkY2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3Dy2rH"
        fee: 10
        unlockTime: 0
        hash: "8e2dc89659409ea9c34a2e28f7350cefba304159c04cc4926acd12035a8b2379"
        timestamp: 1543222082
  body_5:
    required:
    - "amount"
    properties:
      destination:
        type: "string"
        example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
        description: "The address to send funds to"
      amount:
        type: "number"
        format: "uint64"
        example: 1234
        description: "The amount of TRTL to send (in atomic units)"
      paymentID:
        type: "string"
        example: "38a8224a4c8bc5f060555cf9e89551dcd0cbb1c587a52b63e98f71280c362ee4"
        description: "The payment ID to use"
  inline_response_201_2:
    type: "object"
    properties:
      transactionHash:
        type: "string"
        example: "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
      fee:
        type: "number"
        example: 1000
      relayedToNetwork:
        type: "boolean"
        example: true
        default: true
    example:
      fee: 1000
      relayedToNetwork: true
      transactionHash: "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
  body_6:
    required:
    - "amount"
    properties:
      destination:
        type: "string"
        example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
        description: "The address to send funds to"
      amount:
        type: "number"
        format: "uint64"
        example: 1234
        description: "The amount of TRTL to send (in atomic units)"
      paymentID:
        type: "string"
        example: "38a8224a4c8bc5f060555cf9e89551dcd0cbb1c587a52b63e98f71280c362ee4"
        description: "The payment ID to use"
  inline_response_201_3:
    type: "object"
    properties:
      transactionHash:
        type: "string"
        example: "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
      fee:
        type: "number"
        example: 1000
      relayedToNetwork:
        type: "boolean"
        example: false
        default: false
    example:
      fee: 1000
      relayedToNetwork: false
      transactionHash: "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
  body_7:
    properties:
      transactionHash:
        type: "string"
        example: "1982d8903c5e2b0914e6586e5b715758823e4903c2bacda7aa519ff6feb1476e"
        description: "The transaction hash returned by a previous `/transactions/prepare/basic`\
          \ or `/transactions/prepare/advanced` call"
  inline_response_201_4:
    type: "object"
    properties:
      transactionHash:
        type: "string"
        example: "1982d8903c5e2b0914e6586e5b715758823e4903c2bacda7aa519ff6feb1476e"
    example:
      transactionHash: "1982d8903c5e2b0914e6586e5b715758823e4903c2bacda7aa519ff6feb1476e"
  inline_response_201_5:
    type: "object"
    properties:
      transactionHash:
        type: "string"
        example: "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
    example:
      transactionHash: "396e2a782c9ce9993982c6f93e305b05306d0e5794f57157fbac78581443c55f"
  body_8:
    properties:
      mixin:
        type: "number"
        example: 3
        description: "The mixin level to use"
      sourceAddresses:
        type: "array"
        description: "The addresses to draw funds for the transaction from (must be\
          \ an address in this container)"
        items:
          type: "string"
          example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
      destination:
        type: "string"
        example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
        description: "The destination address to send funds to. Must exist in this\
          \ wallet."
      optimizeTarget:
        type: "number"
        example: 10000000
        description: "If given, we will not fuse inputs larger than this value. Value\
          \ given must be a valid input amount, i.e. only a single significant leading\
          \ digit. For example, 20000 is fine, 23456 is not."
  inline_response_200_11:
    type: "object"
    properties:
      transactionPrivateKey:
        type: "string"
        example: "199c0b9c40e192f1917a2f317c72fb6684081c744c3286793e6d63b5d3f6930a"
        description: "The transaction private key"
    example:
      transactionPrivateKey: "199c0b9c40e192f1917a2f317c72fb6684081c744c3286793e6d63b5d3f6930a"
  inline_response_200_12:
    type: "object"
    properties:
      unlocked:
        type: "number"
        format: "uint64"
        example: 1234
        description: "Unlocked, spendable balance. In atomic units."
      locked:
        type: "number"
        format: "uint64"
        example: 123
        description: "Locked, unspendable balance. Possibly unconfirmed change, or\
          \ a transaction with an unlock time specified. In atomic units."
    example:
      locked: 123
      unlocked: 1234
  inline_response_200_13:
    type: "object"
    properties:
      unlocked:
        type: "number"
        format: "uint64"
        example: 1234
        description: "Unlocked, spendable balance. In atomic units."
      locked:
        type: "number"
        format: "uint64"
        example: 123
        description: "Locked, unspendable balance. Possibly unconfirmed change, or\
          \ a transaction with an unlock time specified. In atomic units."
      address:
        type: "string"
        example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
        description: "The address this balance belongs to"
    example:
      address: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
      locked: 123
      unlocked: 1234
  SendTransactionAdvanced_destinations:
    type: "object"
    properties:
      address:
        type: "string"
        example: "TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW"
        description: "The address to send to"
      amount:
        type: "number"
        format: "uint64"
        example: 1234
        description: "The amount of TRTL to send (in atomic units)"
  Transaction_transfers:
    type: "object"
    properties:
      address:
        type: "string"
        example: "TRTLv3ErzkY2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3Dy2rH"
        description: "The receiving address of this transfer, or the sending address\
          \ if the amount is negative"
      amount:
        type: "number"
        format: "int64"
        example: 1234
        description: "The amount of this transfer, in atomic units"
    example:
      amount: 1234
      address: "TRTLv3ErzkY2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3Dy2rH"
parameters:
  address:
    name: "address"
    in: "path"
    description: "The address to use for this operation. Should be a valid, 99 character\
      \ TRTL address."
    required: true
    type: "string"
    x-exportParamName: "Address"
  paymentID:
    name: "paymentID"
    in: "path"
    description: "The payment ID to use for this operation. Should be a 64 char hex\
      \ string."
    required: true
    type: "string"
    x-exportParamName: "PaymentID"
  hash:
    name: "hash"
    in: "path"
    description: "The transaction hash to use for this operation. Should be a 64 char\
      \ hex string."
    required: true
    type: "string"
    x-exportParamName: "Hash"
  startHeight:
    name: "startHeight"
    in: "path"
    description: "The starting block height to use for this operation."
    required: true
    type: "number"
    x-exportParamName: "StartHeight"
  endHeight:
    name: "endHeight"
    in: "path"
    description: "The ending block height to use for this operation."
    required: true
    type: "number"
    x-exportParamName: "EndHeight"
responses:
  UnauthorizedError:
    description: "API key is missing or invalid."
  AlreadyOpen:
    description: "A wallet is already open. Call DELETE on /wallet first, to close\
      \ it."
  Success:
    description: "The operation completed successfully."
  BadRequest:
    description: "A parse error occured, or an error occured processing your request."
    schema:
      $ref: "#/definitions/inline_response_400"
  NotOpen:
    description: "This operation requires a wallet to be open, and one has not been\
      \ opened."
  InternalError:
    description: "An exception was thrown whilst processing the request. See the console\
      \ for logs."
